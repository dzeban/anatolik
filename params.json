{"name":"Anatolik","tagline":"Funny static blog engine","body":"`Anatolik` is a tool that helps you to build your own static site.\r\n\r\nIt's build for me by me and I don't think it will fits your needs. As a person\r\nwith heavy NIH syndrom I was not satisfied with existing static blogging\r\nsystems, so I made my own. Yay!\r\n\r\nMy needs:\r\n\r\n* Python. I need a system that I can talk to in it's native language.\r\n* Python 3. Yes, exactly third version, because I speak russian and need\r\n  unicode support. Also I don't want system that developed for outdated version\r\n  of language.\r\n* Content interlinks. I need to reference to other of my post.\r\n* Simplicity. No social bullshit, no comments, just as little as possible.\r\n\r\nNone of existing static blogging platforms have fit me, so here where I am and\r\nthat's why I'm releasing this.\r\n\r\nDependencies\r\n------------\r\n\r\n* python3\r\n* pyatom\r\n* PyYAML\r\n* pypandoc\r\n* mako\r\n* requests\r\n\r\nHow it works\r\n------------\r\n\r\nAnatolik operates on Site with Posts, Layouts and Pages.\r\n\r\n- Site is a global object that contains general information about whole site.\r\n- Posts are content documents. Posts must supply layout to use. Posts are\r\ntranslated into HTML. Posts can have templates.\r\n- Layouts are markup documents that wraps translated posts. Layouts can also have\r\ntemplates.\r\n- Pages are final stage. Page it's a processed layout with content.\r\n\r\n```\r\n\t+------------------------+\r\n\t|                        |\r\n\t|         Page           |\r\n\t|                        |\r\n\t|      (Pure HTML)       |\r\n\t|                        |\r\n\t+------------------------+\r\n\t\t\t\t^\r\n\t\t\t\t|\r\n\t\t\t\t|\r\n\t   Templates processing\r\n\t\t\t\t|\r\n\t\t Content insertion\r\n\t\t\t\t|\r\n\t\t\t\t|\r\n\t+------------------------+\r\n\t|                        |\r\n\t|        Layout          |\r\n\t|                        |\r\n\t|   (HTML + Templates)   |\r\n\t|                        |\r\n\t+------------------------+\r\n\t\t\t\t^\r\n\t\t\t\t|\r\n\t\t\t\t|\r\n\t   Templats processing\r\n\t\t\t\t|\r\n\t   Translation to HTML\r\n\t\t\t\t|\r\n\t\t\t\t|\r\n\t+------------------------+\r\n\t|                        |\r\n\t|        Content         |\r\n\t|                        |\r\n\t| (Markdown + Templates) |\r\n\t|                        |\r\n\t+------------------------+\r\n```\r\n\r\nFrom the top view compilation process is following\r\n\r\n0. Build site map.\r\n   Site map is hash map accessible from every component that contains:\r\n   * Configuration;\r\n   * Paths to posts, layouts, output, assets;\r\n   * Lists of content posts, layouts objects (filled during processing).\r\n\r\n   Mainly this map is used in templates such as %{ site.url } or \r\n   %{ site.posts['some-post'] }.\r\n\r\n1. Process layouts.\r\n   For every layout:\r\n   * Parse layout file and instantiate Layout object;\r\n   * Render layout templates.\r\n\r\n2. Process posts.\r\n   For every content post:\r\n   * Parse post file and instantiate Post object;\r\n   * Render post templates;\r\n   * Convert to HTML.\r\n\r\n3. For every post.\r\n   * Instantiate Page object from post and corresponding layout;\r\n   * Insert post in layout;\r\n   * Store Page in output directory under given directory.\r\n\r\n4. Put assets in output.\r\n\r\n\r\nTemplating\r\n----------\r\n\r\nTemplating is done with Mako templates.\r\n\r\nEach post are given 2 dictionaries:\r\n\r\n1. `site` - global configuration object. site members:\r\n    * `posts` - list of all posts\r\n    * `layouts` - list of all layouts\r\n    * `url` - site URL\r\n1. `post` - current post object\r\n\r\n<!-- vim: set ft=markdown: -->\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}